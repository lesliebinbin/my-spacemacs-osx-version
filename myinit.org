* Approaches to configure Spacemacs in org file

** General Editor Configure
   #+begin_src emacs-lisp :tangle yes
     (require 'cl-lib)
     (setq treemacs-width 25)

     (setq browse-url-browser-function 'browse-url-generic
           engine/browser-function 'browse-url-generic
           browse-url-generic-program "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome")
   #+end_src

** Configure Org Mode
   #+begin_src emacs-lisp :tangle yes
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((gnuplot . t)
        (ruby . t)
        (lisp . t)
        (clojure . t)
        ))
     ;; Google Calendar Related
     (setq org-gcal-client-id (getenv "GCAL_CLIENT_ID")
           org-gcal-client-secret (getenv "GCAL_CLIENT_SECRET")
           org-gcal-file-alist '(("lesliebinbin19900129@gmail.com" . "~/.spacemacs.d/calendars/leslie.org")))
     (setq org-agenda-files '("~/.spacemacs.d/calendars/leslie.org"))
   #+end_src

** Configure the LeetCode
   #+begin_src emacs-lisp :tangle yes
     (setq leetcode-prefer-language "c")
     (setq leetcode-prefer-sql "mysql")
     (setq url-debug t)
   #+end_src
** Configure Prodigy for personal blogging

   #+begin_src emacs-lisp :tangle yes
     (prodigy-define-service
       :name "nikola-auto"
       :command "/Users/lesliebinbin/Desktop/myproject/.venv/bin/nikola"
       :args '("auto")
       :cwd "/Users/lesliebinbin/Desktop/myproject/"
       :tags '(nikola auto blog)
       :stop-signal 'sigint
       )

     (prodigy-define-service
       :name "nikola-deploy"
       :command "/Users/lesliebinbin/Desktop/myproject/.venv/bin/nikola"
       :args '("github_deploy")
       :cwd "/Users/lesliebinbin/Desktop/myproject/"
       :tags '(nikola deploy github)
       :stop-signal 'sigint
       )

     (prodigy-define-service
       :name "nikola-new-post"
       :command "/Users/lesliebinbin/Desktop/myproject/.venv/bin/nikola"
       :args '("new_post -f orgmode")
       :cwd "/Users/lesliebinbin/Desktop/myproject/"
       :tags '(nikola new-post org-mode)
       :stop-signal 'sigint
       )
   #+end_src

** Configure Nikola Blogging, even though currently I have no idea how it works
   #+begin_src emacs-lisp :tangle yes
     (setq nikola-new-post-extension "org")
   #+end_src

** Configure Easy-Hugo
   #+begin_src emacs-lisp :tangle yes
     (setq easy-hugo-basedir "~/Desktop/myproject/")
   #+end_src

** Configure Gradle to use Gradlew
   #+begin_src emacs-lisp :tangle yes
     (defun config-the-gradlew ()
       (setq gradle-use-gradlew t)
       (setq gradle-gradlew-executable "./gradlew")
       )

     (config-the-gradlew)
   #+end_src

** Configure Projectile
   #+begin_src emacs-lisp :tangle yes
     (defun config-projectile ()
       (setq projectile-project-search-path '("~/Desktop/uq_courses/" "~/Desktop/cs_courses/"))
       )
     (config-projectile)
   #+end_src

** Configure Latex
   #+begin_src emacs-lisp :tangle yes
     (defun my-config-latex ()
       (add-hook 'doc-view-mode-hook 'auto-revert-mode)
       (setq LaTeX-item-indent 0)
       (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
       )
     (my-config-latex)
   #+end_src

** Configure PDF Tools
   #+begin_src emacs-lisp :tangle yes
     (defun config-my-pdf-tools ()
       (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
       )
     (config-my-pdf-tools)
   #+end_src

** Configure Emmet
   #+begin_src emacs-lisp :tangle yes
     (defun config-my-emmet ()
       (add-hook 'sgml-mode-hook 'emmet-mode)
       (add-hook 'css-mode-hook 'emmet-mode)
       (setq emmet-expand-jsx-className? t)
       )
     (config-my-emmet)
   #+end_src


** Configure Go Language
   #+begin_src emacs-lisp :tangle yes
     (defun config-my-golang ()
       (setq go-format-before-save t))
     (config-my-golang)
   #+end_src


** Configure Tabnine for Intelligent Code Completion
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'spacemacs-default-company-backends #'company-tabnine)
   #+end_src

** Configure Remote Tramp
   #+begin_src emacs-lisp :tangle yes
     (setq-default enable-remote-dir-locals t)
   #+end_src

** Configure Java
   #+begin_src emacs-lisp :tangle yes
     (require 'lsp-java)
     ;;(require 'lsp-java-boot)
     (add-to-list 'lsp-java-vmargs "-javaagent:/Users/lesliebinbin/.spacemacs.d/.some-tools/lombok-1.18.6.jar")
     ;; (add-hook 'lsp-mode-hook #'lsp-lens-mode)
     ;; (add-hook 'java-mode-hook #'lsp-java-boot-lens-mode)
   #+end_src

** Let Gnuplot Mode be recognised
   #+begin_src emacs-lisp :tangle yes
     (add-to-list 'auto-mode-alist '("\\.\\(gp\\|gnuplot\\)$" . gnuplot-mode))
   #+end_src


** Configure The Spotify
   #+begin_src emacs-lisp :tangle yes
     (setq spotify-oauth2-client-secret (getenv "SPOTIFY_OAUTH_CLIENT_SECRET"))
     (setq spotify-oauth2-client-id (getenv "SPOTIFY_OAUTH_CLIENT_ID"))
     (setq spotify-transport 'connect)
   #+end_src

** Configure The Slack
   #+begin_src emacs-lisp :tangle yes
     (slack-register-team
      :name "UQIxDThesis"
      :default t
      :client-id (getenv "SLACK_CLIENT_ID")
      :client-secret (getenv "SLACK_SECRET")
      :token "token" (getenv "SLACK_TOKEN")
      :subscribed-channels '(general slackbot))
   #+end_src

** Configure The atomic chrome
   #+begin_src emacs-lisp :tangle yes
     (require 'atomic-chrome)
     (atomic-chrome-start-server)
   #+end_src

** Configure The mu4e
   #+begin_src emacs-lisp :tangle yes
     ;;mu4e
     (setq mu4e-maildir "~/.mail"
           mu4e-update-interval 60
           mu4e-view-show-images t
           mu4e-view-show-addresses t
           org-mu4e-convert-to-html t)
     (setq mu4e-contexts
           `(
             ;; gmail
             ,(make-mu4e-context
               :name "Gmail"
               :enter-func (lambda () (mu4e-message "Switch to the Gmail context"))
               ;; leave-func not defined
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-contact-field-matches msg
                                                                   :to "lesliebinbin19900129@gmail.com")))
               :vars '(  ( user-mail-address      . "lesliebinbin19900129@gmail.com")
                         ( user-full-name     . "Leslie Binbin" )
                         ( mu4e-compose-signature .
                                                  (concat
                                                   "Best regards,\n"
                                                   "Leslie Binbin\n"))
                         (mu4e-get-mail-command . "offlineimap -a Gmail")
                         (mu4e-sent-messages-behavior . delete)
                         (mu4e-sent-folder . "/lesliebinbin19900129@gmail.com/[Gmail].Sent Mail")
                         (mu4e-drafts-folder . "/lesliebinbin19900129@gmail.com/[Gmail].Drafts")
                         (mu4e-trash-folder . "/lesliebinbin19900129@gmail.com/[Gmail].Trash")
                         (mu4e-retfile-folder . "/lesliebinbin19900129@gmail.com/[Gmail].All Mail")
                         (user-mail-address . "lesliebinbin19900129@gmail.com")
                         ;; (smtpmail-stream-type . 'starttls)
                         (smtpmail-default-smtp-server . "smtp.gmail.com")
                         (smtpmail-smtp-server . "smtp.gmail.com")
                         (smtpmail-smtp-service . 587)
                         (smtpmail-smtp-user . "lesliebinbin19900129@gmail.com")
                         (smtpmail-debug-verb . t)
                         (smtpmail-stream-type . starttls)
                         ))
             ;; gmail
             ;;UQ
             ,(make-mu4e-context
               :name "UQ"
               :enter-func (lambda () (mu4e-message "Switch to the UQ context"))
               ;; leave-func not defined
               :match-func (lambda (msg)
                             (when msg
                               (mu4e-message-contact-field-matches msg
                                                                   :to "zhibin.huang@uqconnect.edu.au")))
               :vars '(  ( user-mail-address      . "zhibin.huang@uqconnect.edu.au"  )
                         ( user-full-name     . "Zhibin Huang" )
                         ( mu4e-compose-signature .
                                                  (concat
                                                   "Best regards,\n"
                                                   "Zhibin Huang\n"))
                         (mu4e-get-mail-command . "offlineimap -a UQ-Outlook")
                         (mu4e-sent-messages-behavior . delete)
                         (mu4e-sent-folder . "/zhibin.huang@uqconnect.edu.au/Sent Items")
                         (mu4e-drafts-folder . "/zhibin.huang@uqconnect.edu.au/Drafts")
                         (mu4e-trash-folder . "/zhibin.huang@uqconnect.edu.au/Deleted Items")
                         (mu4e-retfile-folder . "/zhibin.huang@uqconnect.edu.au/Inbox")
                         (user-mail-address . "zhibin.huang@uqconnect.edu.au")
                         ;; (smtpmail-stream-type . 'starttls)
                         (smtpmail-default-smtp-server . "smtp-mail.outlook.com")
                         (smtpmail-smtp-server . "smtp-mail.outlook.com")
                         (smtpmail-smtp-service . 587)
                         (smtpmail-smtp-user . "zhibin.huang@uqconnect.edu.au")
                         (smtpmail-debug-verb . t)
                         (send-mail-function . smtpmail-send-it)
                         ))
             ;;UQ
             ))


     (when (fboundp 'imagemagick-register-types)
       (imagemagick-register-types))

     (with-eval-after-load 'mu4e-alert
       (mu4e-alert-set-default-style 'notifier))
     ;;mu4e

   #+end_src
